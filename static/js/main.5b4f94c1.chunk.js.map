{"version":3,"sources":["components/Chessboard/index.jsx","App.jsx","Reducer.js","Store.js","serviceWorker.js","index.js"],"names":["levels","bg","color","size","CELL_WIDTH","SPACE_WIDTH","_grid","connect","state","store","dispatch","useState","msgVisible","setMsgVisible","msg","setMsg","grid","setGrid","list","setList","createNewCell","Math","random","useEffect","newList","i","length","j","push","Object","assign","x","y","level","JSON","parse","stringify","isGameOver","forEach","row","item","out","type","payload","gameStarted","stepDirection","newGrid","score","m","newCol","n","pow","index","newRow","unshift","spaceCells","floor","newCellLevel","className","Array","fill","map","key","style","top","left","background","fontSize","onClick","level1","level2","x1","y1","x2","y2","stepNum","data","localStorage","getItem","tabIndex","onKeyUp","e","direction","keyCode","bestScore","initState","createStore","action","setItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b4f94c1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport './index.scss';\n\nconst levels = [\n  { bg: '#eee4da', color: '#776e65', size: 34 }, // 2\n  { bg: '#ede0c8', color: '#776e65', size: 34 }, // 4\n  { bg: '#f2b179', color: '#f9f6f2', size: 34 }, // 8\n  { bg: '#f59563', color: '#f9f6f2', size: 34 }, // 16\n  { bg: '#f67c5f', color: '#f9f6f2', size: 34 }, // 32\n  { bg: '#f65e3b', color: '#f9f6f2', size: 34 }, // 64\n  { bg: '#edcf72', color: '#f9f6f2', size: 24 }, // 128\n  { bg: '#edcc61', color: '#f9f6f2', size: 24 }, // 256\n  { bg: '#edc850', color: '#f9f6f2', size: 24 }, // 512\n  { bg: '#edc53f', color: '#f9f6f2', size: 14 }, // 1024\n  { bg: '#ecc400', color: '#f9f6f2', size: 14 }, // 2048\n];\nconst CELL_WIDTH = 60; // 格子宽度\nconst SPACE_WIDTH = 10; // 间隔宽度\nlet _grid = null;\n\nconst Chessboard = ({ store, dispatch }) => {\n  const [msgVisible, setMsgVisible] = useState(true);\n  const [msg, setMsg] = useState('准备好了吗？');\n  const [grid, setGrid] = useState([\n    [null, null, null, null],\n    [null, null, null, null],\n    [null, null, null, null],\n    [null, null, null, null],\n  ]);\n  const [list, setList] = useState([]);\n\n  useEffect(() => {\n    let newList = [];\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j] !== null) {\n          newList.push(Object.assign({}, {\n            x: j,\n            y: i,\n            level: grid[i][j],\n          }, levels[grid[i][j]]));\n        }\n      }\n    }\n    setList(newList);\n    _grid = JSON.parse(JSON.stringify(grid));\n\n    // 判断游戏是否结束\n    let isGameOver = true;\n    grid.forEach(row => {\n      row.forEach(item => {\n        if (item === null) {\n          isGameOver = false;\n        }\n      });\n    });\n    out:\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (\n          (grid[i][j] === null) ||\n          (j < 3 && (grid[i][j] === grid[i][j + 1])) ||\n          (i < 3 && (grid[i][j] === grid[i + 1][j]))\n        ) {\n          isGameOver = false;\n          break out;\n        }\n      }\n    }\n    if (isGameOver) { // 游戏结束\n      setMsg('Game over!');\n      setMsgVisible(true);\n      dispatch({\n        type: 'updateState',\n        payload: {\n          gameStarted: false,\n        },\n      });\n    }\n\n  }, [dispatch, grid]);\n\n  useEffect(() => {\n    if (store.stepDirection) {\n      const newGrid = [];\n      let score = 0; // 分数\n      switch (store.stepDirection) {\n        case 'TOP':\n          while (newGrid.length < 4) {\n            newGrid.push([[], [], [], []]);\n          }\n          for (let m = 0; m < 4; m++) {\n            let newCol = [];\n            for (let n = 0; n < 4; n++) {\n              if (_grid[n][m] !== null) {\n                newCol.push(_grid[n][m]);\n              }\n            }\n            if (newCol.length) {\n              for (let i = 1; i <= newCol.length; i++) {\n                if (newCol[i] === null) {\n                  break;\n                }\n                if (newCol[i] === newCol[i - 1]) {\n                  newCol[i - 1] = newCol[i - 1] + 1;\n                  score += Math.pow(2, newCol[i] + 2);\n                  for (let j = i; j < newCol.length; j++) {\n                    if (newCol[j + 1] || newCol[j + 1] === 0) {\n                      newCol[j] = newCol[j + 1];\n                    } else {\n                      newCol[j] = null;\n                    }\n                  }\n                }\n              }\n            }\n            while (newCol.length < 4) {\n              newCol.push(null);\n            }\n            newCol.forEach((item, index) => {\n              newGrid[index][m] = item;\n            });\n          }\n          break;\n        case 'LEFT':\n          _grid.forEach(row => {\n            let newRow = [];\n            row.forEach(item => {\n              if (item !== null) {\n                newRow.push(item);\n              }\n            });\n            if (newRow.length) {\n              for (let i = 1; i <= newRow.length; i++) {\n                if (newRow[i] === null) {\n                  break;\n                }\n                if (newRow[i] === newRow[i - 1]) {\n                  newRow[i - 1] = newRow[i - 1] + 1;\n                  score += Math.pow(2, newRow[i] + 2);\n                  for (let j = i; j < newRow.length; j++) {\n                    if (newRow[j + 1] || newRow[j + 1] === 0) {\n                      newRow[j] = newRow[j + 1];\n                    } else {\n                      newRow[j] = null;\n                    }\n                  }\n                }\n              }\n            }\n            while (newRow.length < 4) {\n              newRow.push(null);\n            }\n            newGrid.push(newRow);\n          });\n          break;\n        case 'RIGHT':\n          _grid.forEach(row => {\n            let newRow = [];\n            row.forEach(item => {\n              if (item !== null) {\n                newRow.push(item);\n              }\n            });\n            if (newRow.length > 1) {\n              for (let i = newRow.length - 2; i >= 0; i--) {\n                if (newRow[i] === null) {\n                  break;\n                }\n                if (newRow[i] === newRow[i + 1]) {\n                  newRow[i + 1] = newRow[i + 1] + 1;\n                  score += Math.pow(2, newRow[i] + 2);\n                  for (let j = i; j >= 0; j--) {\n                    if (newRow[j - 1] || newRow[j - 1] === 0) {\n                      newRow[j] = newRow[j - 1];\n                    } else {\n                      newRow[j] = null;\n                    }\n                  }\n                }\n              }\n            }\n            while (newRow.length < 4) {\n              newRow.unshift(null);\n            }\n            newGrid.push(newRow);\n          });\n          break;\n        case 'BOTTOM':\n          while (newGrid.length < 4) {\n            newGrid.push([[], [], [], []]);\n          }\n          for (let m = 0; m < 4; m++) {\n            let newCol = [];\n            for (let n = 0; n < 4; n++) {\n              if (_grid[n][m] !== null) {\n                newCol.push(_grid[n][m]);\n              }\n            }\n            if (newCol.length > 1) {\n              for (let i = newCol.length - 2; i >= 0; i--) {\n                if (newCol[i] === null) {\n                  break;\n                }\n                if (newCol[i] === newCol[i + 1]) {\n                  newCol[i + 1] = newCol[i + 1] + 1;\n                  score += Math.pow(2, newCol[i] + 2);\n                  for (let j = i; j >= 0; j--) {\n                    if (newCol[j - 1] || newCol[j - 1] === 0) {\n                      newCol[j] = newCol[j - 1];\n                    } else {\n                      newCol[j] = null;\n                    }\n                  }\n                }\n              }\n            }\n            while (newCol.length < 4) {\n              newCol.unshift(null);\n            }\n            newCol.forEach((item, index) => {\n              newGrid[index][m] = item;\n            });\n          }\n          break;\n        default:\n          break;\n      }\n      if (JSON.stringify(_grid) !== JSON.stringify(newGrid)) {\n        // 更新游戏步数\n        dispatch({\n          type: 'updateStepNum',\n        });\n\n        // 添加新的数\n        const spaceCells = [];\n        for (let i = 0; i < 4; i++) {\n          for (let j = 0; j < 4; j++) {\n            if (newGrid[i][j] === null) {\n              spaceCells.push({ x: i, y: j });\n            }\n          }\n        }\n        const random = Math.floor(Math.random() * spaceCells.length);\n        const newCellLevel = createNewCell();\n        const { x, y } = spaceCells[random];\n        newGrid[x][y] = newCellLevel;\n        setGrid(newGrid);\n      }\n      dispatch({\n        type: 'updateStepDirection',\n        payload: '',\n      });\n      dispatch({\n        type: 'updateScore',\n        payload: score,\n      });\n    }\n  }, [dispatch, store.stepDirection])\n\n  /**\n   * 生成格子\n   * @return {void}\n   */\n  function createCellsEl() {\n    let cells = new Array(16).fill('').map((i, index) => {\n      return (\n        <div\n          key={index}\n          className=\"cell\"\n          style={{\n            top: Math.floor(index / 4) * (CELL_WIDTH + SPACE_WIDTH) + SPACE_WIDTH,\n            left: index % 4 * (CELL_WIDTH + SPACE_WIDTH) + SPACE_WIDTH,\n          }}\n        />\n      );\n    });\n    return cells;\n  }\n\n  /**\n   * 开始按钮被点击\n   * @return {void}\n   */\n  function playBtnOnClick() {\n    const level1 = createNewCell();\n    const level2 = createNewCell();\n\n    const x1 = Math.floor(Math.random() * 4);\n    const y1 = Math.floor(Math.random() * 4);\n    let x2 = x1;\n    let y2 = y1;\n    while (x2 === x1 && y2 === y1) {\n      x2 = Math.floor(Math.random() * 4);\n      y2 = Math.floor(Math.random() * 4);\n    }\n\n    let newGrid = [\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n    ];\n    newGrid[y1][x1] = level1;\n    newGrid[y2][x2] = level2;\n\n    setGrid(newGrid);\n    setMsgVisible(false);\n    dispatch({\n      type: 'updateState',\n      payload: {\n        gameStarted: true,\n        stepNum: 0,\n        score: 0,\n      },\n    });\n  }\n\n  /**\n   * 生成新的格子数据\n   */\n  function createNewCell() {\n    // 格子等级，十分之一的概率为等级1的格子\n    const level = Math.random() > 0.9 ? 1 : 0;\n    return level;\n  }\n\n  return (\n    <div\n      className=\"chessboard\"\n    >\n      { createCellsEl() }\n\n      {\n        list.map((item, index) => {\n          return (\n            <div\n              key={index}\n              className=\"cell\"\n              style={{\n                top: item.y * (CELL_WIDTH + SPACE_WIDTH) + SPACE_WIDTH,\n                left: item.x % 4 * (CELL_WIDTH + SPACE_WIDTH) + SPACE_WIDTH,\n                background: item.bg,\n                fontSize: item.size,\n                color: item.color,\n              }}\n            >\n              {Math.pow(2, item.level + 1)}\n            </div>\n          )\n        })\n      }\n\n      {\n        msgVisible ? (\n          <div className=\"game-over\">\n            <p className=\"message\">{msg}</p>\n            <div className=\"play-btn\" onClick={playBtnOnClick}>开始游戏</div>\n          </div>\n        ) : null\n      }\n    </div>\n  );\n};\n\nexport default connect(state => ({\n  store: state,\n}))(Chessboard);\n","import React, { useEffect } from 'react';\nimport Chessboard from './components/Chessboard/index.jsx';\nimport { connect } from \"react-redux\";\nimport './App.scss';\n\nfunction App({ store, dispatch }) {\n\n  useEffect(() => {\n    const data = localStorage.getItem('bestScore');\n    if (data) {\n      dispatch({\n        type: 'updateBestScore',\n        payload: data,\n      });\n    }\n  }, [dispatch]);\n\n  /**\n   * 键盘事件\n   */\n  function onKeyUp(e) {\n    if (!store.gameStarted) {\n      return;\n    }\n    let direction = null;\n    switch (e.keyCode) {\n      case 87:\n      case 38:\n        direction = 'TOP';\n        break;\n      case 68:\n      case 39:\n        direction = 'RIGHT';\n        break;\n      case 83:\n      case 40:\n        direction = 'BOTTOM';\n        break;\n      case 65:\n      case 37:\n        direction = 'LEFT';\n        break;\n      default:\n        break;\n    }\n    dispatch({\n      type: 'updateStepDirection',\n      payload: direction,\n    });\n  }\n\n  return (\n    <div\n      className=\"app\"\n      tabIndex=\"0\"\n      onKeyUp={onKeyUp}\n    >\n      <div className=\"wrap\">\n        <div className=\"header\">\n          <div className=\"title\">2048</div>\n          <div className=\"info\">\n            <div className=\"block\">\n              <p className=\"name\">得分</p>\n              <p className=\"score\">{store.score}</p>\n            </div>\n            <div className=\"block\">\n              <p className=\"name\">最高分</p>\n              <p className=\"score\">{store.bestScore}</p>\n            </div>\n          </div>\n        </div>\n\n        <Chessboard />\n      </div>\n    </div>\n  );\n}\n\nexport default connect(state => ({\n  store: state,\n}))(App);\n","const initState = {\n  gameStarted: false, // 游戏是否开始\n  stepNum: 0, // 游戏步数\n  stepDirection: '', // 方向\n  score: 0, // 当前分数\n  bestScore: 0, // 最高分数\n};\n\nexport default (state = initState, action) => {\n  switch (action.type) {\n    case 'updateState':\n      return {\n        ...state,\n        ...action.payload,\n      };\n    case 'updateStepNum':\n      return {\n        ...state,\n        stepNum: state.stepNum + 1,\n      };\n    case 'updateStepDirection':\n      return {\n        ...state,\n        stepDirection: action.payload,\n      };\n    case 'updateScore':\n      const score = state.score + action.payload;\n      if (score > state.bestScore) {\n        localStorage.setItem('bestScore', score);\n      }\n      return {\n        ...state,\n        score,\n        bestScore: score > state.bestScore ? score : state.bestScore,\n      };\n    case 'updateBestScore':\n      return {\n        ...state,\n        bestScore: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore } from 'redux';\nimport Reducer from './Reducer';\n\nconst store = createStore(Reducer)\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport store from \"./Store\";\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}